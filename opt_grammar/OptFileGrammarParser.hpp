/** \file
 *  This C++ header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : OptFileGrammar.g
 *     -                            On : 2014-06-23 15:51:11
 *     -                for the parser : OptFileGrammarParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The parser OptFileGrammarParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_OptFileGrammarParser_H
#define _OptFileGrammarParser_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include <iostream>
  #include "antlr3exception.hpp"
  #include "OptFileGrammarLexer.hpp"
  #include "boost/algorithm/string.hpp"
  #include "map"
  #include "string"
  #include "vector"
  using namespace std;
  using namespace boost;




#ifdef	WIN32
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

typedef OptFileGrammarParserTraits OptFileGrammarParserImplTraits;


class OptFileGrammarParserTokens
{
public:
	/** Symbolic definitions of all the tokens that the parser will work with.
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens 
	{
		EOF_TOKEN = OptFileGrammarParserImplTraits::CommonTokenType::TOKEN_EOF
		, T__7 = 7 
		, T__8 = 8 
		, T__9 = 9 
		, T__10 = 10 
		, T__11 = 11 
		, T__12 = 12 
		, T__13 = 13 
		, T__14 = 14 
		, T__15 = 15 
		, T__16 = 16 
		, T__17 = 17 
		, T__18 = 18 
		, Identifier = 4 
		, Number = 5 
		, WS = 6 
	};

};

/** Context tracking structure for OptFileGrammarParser
 */
class OptFileGrammarParser : public OptFileGrammarParserImplTraits::BaseParserType, public OptFileGrammarParserTokens
{
public:
	typedef OptFileGrammarParserImplTraits ImplTraits;
	typedef OptFileGrammarParser ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef OptFileGrammarParserImplTraits::BaseParserType BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
public:
    OptFileGrammarParser(InputType* instream);
    OptFileGrammarParser(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );


    std::map<string, string> each_line;
      bool error_in_parser = false;
      void displayRecognitionError(ANTLR_UINT8** tokens, Parser::ExceptionBaseType* exception);


    struct num_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        num_return()
            : BaseType()
            { init(); }
        num_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        num_return( const num_return& other )
            : BaseType(other)
        { copy(other); }
        ~num_return()
        {
        }

        num_return&
        operator=( const num_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const num_return& other) {  }    
    };


    struct assignment_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        assignment_return()
            : BaseType()
            { init(); }
        assignment_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        assignment_return( const assignment_return& other )
            : BaseType(other)
        { copy(other); }
        ~assignment_return()
        {
        }

        assignment_return&
        operator=( const assignment_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const assignment_return& other) {  }    
    };


    struct comment_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        comment_return()
            : BaseType()
            { init(); }
        comment_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        comment_return( const comment_return& other )
            : BaseType(other)
        { copy(other); }
        ~comment_return()
        {
        }

        comment_return&
        operator=( const comment_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const comment_return& other) {  }    
    };


    struct lvalue_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        lvalue_return()
            : BaseType()
            , lval() 
            { init(); }
        lvalue_return( BaseParserType* parser )
            : BaseType(parser)
            , lval() 
            { init(); }
        lvalue_return( const lvalue_return& other )
            : BaseType(other)
        , lval(other.lval) 
        { copy(other); }
        ~lvalue_return()
        {
        }

        lvalue_return&
        operator=( const lvalue_return& other )
        {
            BaseType::operator=( other );
            lval = other.lval; 
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const lvalue_return& other) {  }    
        std::map<string, string> lval;
    };


    struct rvalue_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        rvalue_return()
            : BaseType()
            , rval() 
            { init(); }
        rvalue_return( BaseParserType* parser )
            : BaseType(parser)
            , rval() 
            { init(); }
        rvalue_return( const rvalue_return& other )
            : BaseType(other)
        , rval(other.rval) 
        { copy(other); }
        ~rvalue_return()
        {
        }

        rvalue_return&
        operator=( const rvalue_return& other )
        {
            BaseType::operator=( other );
            rval = other.rval; 
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const rvalue_return& other) {  }    
        std::map<string, string> rval;
    };


    struct local_variable_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        local_variable_return()
            : BaseType()
            { init(); }
        local_variable_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        local_variable_return( const local_variable_return& other )
            : BaseType(other)
        { copy(other); }
        ~local_variable_return()
        {
        }

        local_variable_return&
        operator=( const local_variable_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const local_variable_return& other) {  }    
    };


    struct constant_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        constant_return()
            : BaseType()
            { init(); }
        constant_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        constant_return( const constant_return& other )
            : BaseType(other)
        { copy(other); }
        ~constant_return()
        {
        }

        constant_return&
        operator=( const constant_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const constant_return& other) {  }    
    };


    struct member_variable_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        member_variable_return()
            : BaseType()
            { init(); }
        member_variable_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        member_variable_return( const member_variable_return& other )
            : BaseType(other)
        { copy(other); }
        ~member_variable_return()
        {
        }

        member_variable_return&
        operator=( const member_variable_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const member_variable_return& other) {  }    
    };


    struct atomExp_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        atomExp_return()
            : BaseType()
            { init(); }
        atomExp_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        atomExp_return( const atomExp_return& other )
            : BaseType(other)
        { copy(other); }
        ~atomExp_return()
        {
        }

        atomExp_return&
        operator=( const atomExp_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const atomExp_return& other) {  }    
    };


    struct set_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        set_return()
            : BaseType()
            { init(); }
        set_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        set_return( const set_return& other )
            : BaseType(other)
        { copy(other); }
        ~set_return()
        {
        }

        set_return&
        operator=( const set_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const set_return& other) {  }    
    };


    struct range_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        range_return()
            : BaseType()
            { init(); }
        range_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        range_return( const range_return& other )
            : BaseType(other)
        { copy(other); }
        ~range_return()
        {
        }

        range_return&
        operator=( const range_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const range_return& other) {  }    
    };


    struct str_return : public OptFileGrammarParserImplTraits::RuleReturnValueType
    {
    public:
        typedef OptFileGrammarParserImplTraits::RuleReturnValueType BaseType;
        str_return()
            : BaseType()
            { init(); }
        str_return( BaseParserType* parser )
            : BaseType(parser)
            { init(); }
        str_return( const str_return& other )
            : BaseType(other)
        { copy(other); }
        ~str_return()
        {
        }

        str_return&
        operator=( const str_return& other )
        {
            BaseType::operator=( other );
            copy(other);    
        	return *this;
        }
        void init() {  }
        void copy( const str_return& other) {  }    
    };


     OptFileGrammarParser::num_return num (); 
     void unit (); 
     OptFileGrammarParser::assignment_return assignment (); 
     OptFileGrammarParser::comment_return comment (); 
     OptFileGrammarParser::lvalue_return lvalue (); 
     OptFileGrammarParser::rvalue_return rvalue (); 
     OptFileGrammarParser::local_variable_return local_variable (); 
     OptFileGrammarParser::constant_return constant (); 
     OptFileGrammarParser::member_variable_return member_variable (); 
     OptFileGrammarParser::atomExp_return atomExp (); 
     OptFileGrammarParser::set_return set (); 
     OptFileGrammarParser::range_return range (); 
     void vector (); 
     OptFileGrammarParser::str_return str (); 
    // Delegated rules

    const char *    getGrammarFileName();
    void            reset();
    ~OptFileGrammarParser();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for OptFileGrammarParser
 * =============================================================================
 */


#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
