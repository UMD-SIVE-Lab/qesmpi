/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : OptFileGrammar.g
 *     -                            On : 2014-06-18 15:28:28
 *     -                for the parser : OptFileGrammarParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "OptFileGrammarParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* OptFileGrammarParserTokenNames[15+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "Identifier",
        (ANTLR_UINT8*) "Number",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'//'",
        (ANTLR_UINT8*) "':'",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'['",
        (ANTLR_UINT8*) "'\\''",
        (ANTLR_UINT8*) "'\\n'",
        (ANTLR_UINT8*) "'\\r'",
        (ANTLR_UINT8*) "']'",
        (ANTLR_UINT8*) "'const'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "OptFileGrammar.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* OptFileGrammarParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new OptFileGrammarParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OptFileGrammarParser::OptFileGrammarParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new OptFileGrammarParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OptFileGrammarParser::OptFileGrammarParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void OptFileGrammarParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( OptFileGrammarParserTokenNames );


}

void
OptFileGrammarParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
OptFileGrammarParser::~OptFileGrammarParser()
 {
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return OptFileGrammarParserTokenNames;
}


    void OptFileGrammarParser::displayRecognitionError(ANTLR_UINT8** tokens, Parser::ExceptionBaseType* exception){
        if(tokens!=NULL){
         /*
          stringstream ss;
          exception->displayRecognitionError(tokens, ss);
          string message = ss.str();
          trim(message);
          ss.str("");
          
          ss<<message<<" at pos: "<<(exception->get_charPositionInLine())+1;
          message = ss.str();
          trim_if(message, is_any_of(":"));
          trim(message);
          cerr<<"Parsing ERROR: "<<message<<endl;
          //_/\_ antlr documentation
          cerr<<"get_message()"<<exception->get_message()<<endl;
          cerr<<"get_streamName()"<<exception->get_streamName()<<endl;
          cerr<<"get_index()"<<exception->get_index()<<endl;
          cerr<<"get_token()"<<exception->get_token()<<endl;
          cerr<<"get_expecting()"<<exception->get_expecting()<<endl;
          cerr<<"get_expectingSet()"<<exception->get_expectingSet()<<endl;
          cerr<<"get_node()"<<exception->get_node()<<endl;
          cerr<<"get_c()"<<exception->get_c()<<endl;
          cerr<<"get_line()"<<exception->get_line()<<endl;
          cerr<<"get_state()"<<exception->get_state()<<endl;
          cerr<<"get_ruleName()"<<exception->get_ruleName()<<endl;
          cerr<<"get_charPositionInLine()"<<exception->get_charPositionInLine()<<endl;
          cerr<<"get_input()"<<exception->get_input()<<endl;
          cerr<<"get_message()"<<exception->get_message()<<endl;
          */
                stringstream errtext;
            // See if there is a 'filename' we can use
            //
            
            error_in_parser = true;
            errtext << "Parser Error: " << this->get_rec()->get_state()->get_exception()->get_message();

            // Prepare the knowledge we know we have
            //
            const CommonTokenType* theToken   = this->get_rec()->get_state()->get_exception()->get_token();
            StringType ttext      = theToken->toString();

            errtext << ", at offset , "
                << this->get_rec()->get_state()->get_exception()->get_charPositionInLine();
            if  (theToken != NULL)
            {
              if (theToken->get_type() == CommonTokenType::TOKEN_EOF)
              {
                errtext << ", at <EOF>\n";
              }
              else
              {
                // Guard against null text in a token
                //
                errtext << "\n    near " << ( ttext.empty()
                                ? "<no text for the token>" : ttext ) << "\n";
              }
            }

            cerr<<errtext.str();

        }
      }


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_num124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_num124( FOLLOW_Number_in_num124_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_unit280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_assignment_in_unit280( FOLLOW_assignment_in_unit280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_comment_in_unit305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_comment_in_unit305( FOLLOW_comment_in_unit305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_unit329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_EOF_in_unit329( FOLLOW_EOF_in_unit329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_assignment344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000040050) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_assignment344( FOLLOW_WS_in_assignment344_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001040) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment349( FOLLOW_lvalue_in_assignment349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_assignment351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001040) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_assignment351( FOLLOW_WS_in_assignment351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_12_in_assignment354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000006070) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_12_in_assignment354( FOLLOW_12_in_assignment354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_assignment356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000006070) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_assignment356( FOLLOW_WS_in_assignment356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_rvalue_in_assignment361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000442) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_rvalue_in_assignment361( FOLLOW_rvalue_in_assignment361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_assignment363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000442) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_assignment363( FOLLOW_WS_in_assignment363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_comment_in_assignment367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_comment_in_assignment367( FOLLOW_comment_in_assignment367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_10_in_comment384_bits[]	= { ANTLR_UINT64_LIT(0x000000000007FFF2) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_10_in_comment384( FOLLOW_10_in_comment384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_constant_in_lvalue409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_constant_in_lvalue409( FOLLOW_constant_in_lvalue409_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_in_lvalue428_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_local_variable_in_lvalue428( FOLLOW_local_variable_in_lvalue428_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_member_variable_in_lvalue455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_member_variable_in_lvalue455( FOLLOW_member_variable_in_lvalue455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_str_in_rvalue499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_str_in_rvalue499( FOLLOW_str_in_rvalue499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_set_in_rvalue513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_set_in_rvalue513( FOLLOW_set_in_rvalue513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_range_in_rvalue529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_range_in_rvalue529( FOLLOW_range_in_rvalue529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_atomExp_in_rvalue547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_atomExp_in_rvalue547( FOLLOW_atomExp_in_rvalue547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_num_in_rvalue567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_num_in_rvalue567( FOLLOW_num_in_rvalue567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_local_variable590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Identifier_in_local_variable590( FOLLOW_Identifier_in_local_variable590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_18_in_constant608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_18_in_constant608( FOLLOW_18_in_constant608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_constant610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000050) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_constant610( FOLLOW_WS_in_constant610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_constant613_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Identifier_in_constant613( FOLLOW_Identifier_in_constant613_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_member_variable631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Identifier_in_member_variable631( FOLLOW_Identifier_in_member_variable631_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_9_in_member_variable634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000010) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_9_in_member_variable634( FOLLOW_9_in_member_variable634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_vector_in_member_variable636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_vector_in_member_variable636( FOLLOW_vector_in_member_variable636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_9_in_member_variable640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000010) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_9_in_member_variable640( FOLLOW_9_in_member_variable640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_member_variable642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Identifier_in_member_variable642( FOLLOW_Identifier_in_member_variable642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_num_in_atomExp658_bits[]	= { ANTLR_UINT64_LIT(0x00000000000001C0) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_num_in_atomExp658( FOLLOW_num_in_atomExp658_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_member_variable_in_atomExp662_bits[]	= { ANTLR_UINT64_LIT(0x00000000000001C0) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_member_variable_in_atomExp662( FOLLOW_member_variable_in_atomExp662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_in_atomExp666_bits[]	= { ANTLR_UINT64_LIT(0x00000000000001C0) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_local_variable_in_atomExp666( FOLLOW_local_variable_in_atomExp666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_atomExp671_bits[]	= { ANTLR_UINT64_LIT(0x00000000000001C0) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_atomExp671( FOLLOW_WS_in_atomExp671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_set_in_atomExp673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000070) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_set_in_atomExp673( FOLLOW_set_in_atomExp673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_atomExp693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000070) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_atomExp693( FOLLOW_WS_in_atomExp693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_num_in_atomExp699_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_num_in_atomExp699( FOLLOW_num_in_atomExp699_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_member_variable_in_atomExp703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_member_variable_in_atomExp703( FOLLOW_member_variable_in_atomExp703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_local_variable_in_atomExp707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_local_variable_in_atomExp707( FOLLOW_local_variable_in_atomExp707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_13_in_set723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_13_in_set723( FOLLOW_13_in_set723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_set726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020060) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_set726( FOLLOW_Number_in_set726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_WS_in_set728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020060) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_WS_in_set728( FOLLOW_WS_in_set728_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_17_in_set733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_17_in_set733( FOLLOW_17_in_set733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_13_in_range748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_13_in_range748( FOLLOW_13_in_range748_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_range750_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_range750( FOLLOW_Number_in_range750_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_11_in_range752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_11_in_range752( FOLLOW_11_in_range752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_range754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_range754( FOLLOW_Number_in_range754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_11_in_range756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_11_in_range756( FOLLOW_11_in_range756_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_range758_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_range758( FOLLOW_Number_in_range758_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_17_in_range760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_17_in_range760( FOLLOW_17_in_range760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Identifier_in_vector775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Identifier_in_vector775( FOLLOW_Identifier_in_vector775_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_13_in_vector777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000020) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_13_in_vector777( FOLLOW_13_in_vector777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_Number_in_vector779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_Number_in_vector779( FOLLOW_Number_in_vector779_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_17_in_vector781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_17_in_vector781( FOLLOW_17_in_vector781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_14_in_str796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000067FF0) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_14_in_str796( FOLLOW_14_in_str796_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OptFileGrammarParser  */
static	ANTLR_BITWORD FOLLOW_14_in_str833_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OptFileGrammarParserImplTraits::BitsetListType FOLLOW_14_in_str833( FOLLOW_14_in_str833_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    258:1: rvalue returns [std::map<string, string> rval] : ( str | set | range | atomExp | num );
 */
static const ANTLR_INT32 dfa9_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_eof[10] =
    {
	-1, -1, -1, 7, -1, -1, 7, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_min[10] =
    {
	4, -1, 5, 6, -1, 5, 6, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_max[10] =
    {
	14, -1, 5, 10, -1, 17, 10, -1, -1, -1
    };
static const ANTLR_INT32 dfa9_accept[10] =
    {
	-1, 1, -1, -1, 4, -1, -1, 5, 3, 2
    };
static const ANTLR_INT32 dfa9_special[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa9_T_empty	 =   NULL;

static const ANTLR_INT32 dfa9_T0[] =
    {
	4, 3, -1, -1, -1, -1, -1, -1, -1, 2, 1
    };

static const ANTLR_INT32 dfa9_T1[] =
    {
	5
    };

static const ANTLR_INT32 dfa9_T2[] =
    {
	6, 4, 4, -1, 7
    };

static const ANTLR_INT32 dfa9_T3[] =
    {
	9, 9, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 9
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa9_transitions[] =
{
    dfa9_T0, NULL, dfa9_T1, dfa9_T2, NULL, dfa9_T3, dfa9_T2, NULL, NULL, 
    NULL
};


/* Declare tracking structure for Cyclic DFA 9
 */
class OptFileGrammarParserCyclicDFA9 : public CyclicDFA< OptFileGrammarParserImplTraits, OptFileGrammarParser >, public OptFileGrammarParserTokens
{
public:
	typedef CyclicDFA< OptFileGrammarParserImplTraits, OptFileGrammarParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	OptFileGrammarParserCyclicDFA9( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static OptFileGrammarParserCyclicDFA9  cdfa9(
	    9,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"258:1: rvalue returns [std::map<string, string> rval] : ( str | set | range | atomExp | num );",
	    dfa9_eot,	    /* EOT table			    */
	    dfa9_eof,	    /* EOF table			    */
	    dfa9_min,	    /* Minimum tokens for each state    */
	    dfa9_max,	    /* Maximum tokens for each state    */
	    dfa9_accept,	/* Accept table			    */
	    dfa9_special,	/* Special transition states	    */
	    dfa9_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 9
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start num
 * OptFileGrammar.g:164:1: num : Number ;
 */
OptFileGrammarParser::num_return
OptFileGrammarParser::num()
{
    OptFileGrammarParser::num_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:165:3: ( Number )
        // OptFileGrammar.g:166:3: Number
        {
             this->matchToken(Number, &FOLLOW_Number_in_num124);
            if  (this->hasException())
            {
                goto rulenumEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenumEx; /* Prevent compiler warnings */
    rulenumEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end num */

/**
 * $ANTLR start unit
 * OptFileGrammar.g:201:1: unit : ( assignment | comment ) EOF ;
 */
void
OptFileGrammarParser::unit()
{
        OptFileGrammarParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    assignment_return assignment1;
    comment_return comment2;
    /* Initialize rule variables
     */


 
    {
        // OptFileGrammar.g:202:3: ( ( assignment | comment ) EOF )
        // OptFileGrammar.g:203:3: ( assignment | comment ) EOF
        {
            // OptFileGrammar.g:203:3: ( assignment | comment )
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                case Identifier:
                case WS:
                case 18:
                	{
                		alt1=1;
                	}
                    break;
                case 10:
                	{
                		alt1=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 1 );
                    ex->set_state( 0 );


                    goto ruleunitEx;

                }

                switch (alt1)
                {
            	case 1:
            	    // OptFileGrammar.g:204:5: assignment
            	    {
            	        this->followPush(FOLLOW_assignment_in_unit280);
            	        assignment1=assignment();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunitEx;
            	        }


            	        {

            	                           ////std::cout<<"Assignment statement: "<<(this->get_strstream()->toStringTT(assignment1.start, assignment1.stop))
            	            ;
            	                          
            	        }


            	    }
            	    break;
            	case 2:
            	    // OptFileGrammar.g:208:7: comment
            	    {
            	        this->followPush(FOLLOW_comment_in_unit305);
            	        comment2=comment();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunitEx;
            	        }


            	        {

            	                          //std::cout<<"comment statement: "<<(this->get_strstream()->toStringTT(comment2.start, comment2.stop))
            	            ;
            	                                        each_line["type"] = "comment";
            	                         
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(EOF, &FOLLOW_EOF_in_unit329);
            if  (this->hasException())
            {
                goto ruleunitEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleunitEx; /* Prevent compiler warnings */
    ruleunitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end unit */

/**
 * $ANTLR start assignment
 * OptFileGrammar.g:217:1: assignment : ( WS )* lval= lvalue ( WS )* '=' ( WS )* rval= rvalue ( WS )* ( ( comment )? ) ;
 */
OptFileGrammarParser::assignment_return
OptFileGrammarParser::assignment()
{
    OptFileGrammarParser::assignment_return retval(this);


    std::map<string, string> lval;
    std::map<string, string> rval;
    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:218:3: ( ( WS )* lval= lvalue ( WS )* '=' ( WS )* rval= rvalue ( WS )* ( ( comment )? ) )
        // OptFileGrammar.g:219:3: ( WS )* lval= lvalue ( WS )* '=' ( WS )* rval= rvalue ( WS )* ( ( comment )? )
        {
            // OptFileGrammar.g:219:3: ( WS )*

            for (;;)
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // OptFileGrammar.g:219:3: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_assignment344);
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_lvalue_in_assignment349);
            lval=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            // OptFileGrammar.g:219:19: ( WS )*

            for (;;)
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // OptFileGrammar.g:219:19: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_assignment351);
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             this->matchToken(12, &FOLLOW_12_in_assignment354);
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            // OptFileGrammar.g:219:27: ( WS )*

            for (;;)
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // OptFileGrammar.g:219:27: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_assignment356);
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_rvalue_in_assignment361);
            rval=rvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            // OptFileGrammar.g:219:43: ( WS )*

            for (;;)
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // OptFileGrammar.g:219:43: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_assignment363);
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


            // OptFileGrammar.g:219:47: ( ( comment )? )
            // OptFileGrammar.g:219:48: ( comment )?
            {
                // OptFileGrammar.g:219:48: ( comment )?
                {
                    int alt6=2;
                    switch ( this->LA(1) )
                    {
                        case 10:
                        	{
                        		alt6=1;
                        	}
                            break;
                    }

                    switch (alt6)
                    {
                	case 1:
                	    // OptFileGrammar.g:219:48: comment
                	    {
                	        this->followPush(FOLLOW_comment_in_assignment367);
                	        comment();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto ruleassignmentEx;
                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start comment
 * OptFileGrammar.g:222:1: comment : '//' ( . )* ;
 */
OptFileGrammarParser::comment_return
OptFileGrammarParser::comment()
{
    OptFileGrammarParser::comment_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:223:3: ( '//' ( . )* )
        // OptFileGrammar.g:224:3: '//' ( . )*
        {
             this->matchToken(10, &FOLLOW_10_in_comment384);
            if  (this->hasException())
            {
                goto rulecommentEx;
            }


            // OptFileGrammar.g:224:8: ( . )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case Identifier:
                case Number:
                case WS:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                	{
                		alt7=1;
                	}
                    break;
                case EOF:
                	{
                		alt7=2;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // OptFileGrammar.g:224:8: .
            	    {
            	        this->matchAnyToken();
            	        if  (this->hasException())
            	        {
            	            goto rulecommentEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecommentEx; /* Prevent compiler warnings */
    rulecommentEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end comment */

/**
 * $ANTLR start lvalue
 * OptFileGrammar.g:231:1: lvalue returns [std::map<string, string> lval] : ( constant | local_variable | member_variable );
 */
std::map<string, string>
OptFileGrammarParser::lvalue()
{
        OptFileGrammarParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::map<string, string> lval;


    constant_return constant3;
    local_variable_return local_variable4;
    member_variable_return member_variable5;
    /* Initialize rule variables
     */
     


 
    {
        {
            //  OptFileGrammar.g:232:3: ( constant | local_variable | member_variable )

            ANTLR_UINT32 alt8;

            alt8=3;

            switch ( this->LA(1) )
            {
            case 18:
            	{
            		alt8=1;
            	}
                break;
            case Identifier:
            	{
            		switch ( this->LA(2) )
            		{
            		case WS:
            		case 12:
            			{
            				alt8=2;
            			}
            		    break;
            		case 9:
            			{
            				alt8=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 2 );


            		    goto rulelvalueEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto rulelvalueEx;

            }

            switch (alt8)
            {
        	case 1:
        	    // OptFileGrammar.g:233:3: constant
        	    {
        	        this->followPush(FOLLOW_constant_in_lvalue409);
        	        constant3=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelvalueEx;
        	        }


        	        {

        	                       string temp =  (this->get_strstream()->toStringTT(constant3.start, constant3.stop))
        	            ;
        	                                       erase_all(temp, "const");
        	                                       trim(temp);
        	                                       each_line["lval"] = temp;
        	                                       each_line["lval_type"] = "control";
        	                      
        	        }


        	    }
        	    break;
        	case 2:
        	    // OptFileGrammar.g:241:5: local_variable
        	    {
        	        this->followPush(FOLLOW_local_variable_in_lvalue428);
        	        local_variable4=local_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelvalueEx;
        	        }


        	        {

        	                               //do these exist at all? Yup they do exists see adityas code he parses them
        	                                                each_line["lval"] = (this->get_strstream()->toStringTT(local_variable4.start, local_variable4.stop))
        	            ;
        	                                                each_line["lval_type"] = "project_variable";
        	                              
        	        }


        	    }
        	    break;
        	case 3:
        	    // OptFileGrammar.g:247:5: member_variable
        	    {
        	        this->followPush(FOLLOW_member_variable_in_lvalue455);
        	        member_variable5=member_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelvalueEx;
        	        }


        	        {

        	                                each_line["lval"] = (this->get_strstream()->toStringTT(member_variable5.start, member_variable5.stop))
        	            ;
        	                                                each_line["lval_type"] = "project_variable";
        	                               
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lval;
}
/* $ANTLR end lvalue */

/**
 * $ANTLR start rvalue
 * OptFileGrammar.g:258:1: rvalue returns [std::map<string, string> rval] : ( str | set | range | atomExp | num );
 */
std::map<string, string>
OptFileGrammarParser::rvalue()
{
        OptFileGrammarParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::map<string, string> rval;


    str_return str6;
    set_return set7;
    range_return range8;
    atomExp_return atomExp9;
    num_return num10;
    /* Initialize rule variables
     */
     


 
    {
        {
            //  OptFileGrammar.g:259:3: ( str | set | range | atomExp | num )

            ANTLR_UINT32 alt9;

            alt9=5;

            alt9 = cdfa9.predict(this, this->get_rec(), this->get_istream(), cdfa9 );
            if  (this->hasException())
            {
                goto rulervalueEx;
            }

            switch (alt9)
            {
        	case 1:
        	    // OptFileGrammar.g:260:3: str
        	    {
        	        this->followPush(FOLLOW_str_in_rvalue499);
        	        str6=str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulervalueEx;
        	        }


        	        {

        	                  string temp  = (this->get_strstream()->toStringTT(str6.start, str6.stop))
        	            ;
        	                            trim_if(temp, is_any_of("'"));
        	                            each_line["rval"] = temp;
        	                            each_line["rval_type"] = "string";
        	                 
        	        }


        	    }
        	    break;
        	case 2:
        	    // OptFileGrammar.g:267:5: set
        	    {
        	        this->followPush(FOLLOW_set_in_rvalue513);
        	        set7=set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulervalueEx;
        	        }


        	        {

        	                    string temp  = (this->get_strstream()->toStringTT(set7.start, set7.stop))
        	            ;
        	                              trim_if(temp, is_any_of("[]"));
        	                              each_line["rval"] = temp;
        	                              each_line["rval_type"] = "set";
        	                   
        	        }


        	    }
        	    break;
        	case 3:
        	    // OptFileGrammar.g:274:5: range
        	    {
        	        this->followPush(FOLLOW_range_in_rvalue529);
        	        range8=range();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulervalueEx;
        	        }


        	        {

        	                      string temp  = (this->get_strstream()->toStringTT(range8.start, range8.stop))
        	            ;
        	                                 trim_if(temp, is_any_of("[]"));
        	                                 std::vector<string> temp2;
        	                                 split(temp2, temp, is_any_of(":"));
        	                                 each_line["min"]  = temp2[0];
        	                                 each_line["step"] = temp2[1];
        	                                 each_line["max"]  = temp2[2];
        	                                 each_line["rval_type"] = "range";
        	                     
        	        }


        	    }
        	    break;
        	case 4:
        	    // OptFileGrammar.g:285:5: atomExp
        	    {
        	        this->followPush(FOLLOW_atomExp_in_rvalue547);
        	        atomExp9=atomExp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulervalueEx;
        	        }


        	        {

        	                        string temp = (this->get_strstream()->toStringTT(atomExp9.start, atomExp9.stop))
        	            ;
        	                                   std::vector<string> temp2;
        	                                   split(temp2, temp, is_any_of("+-"));
        	                                   each_line["left_opd"] = temp2[0];
        	                                   each_line["op"] = temp[temp2[0].size()];
        	                                   each_line["right_opd"] = temp2[1];
        	                                   each_line["rval_type"] = "atomExp";
        	                       
        	        }


        	    }
        	    break;
        	case 5:
        	    // OptFileGrammar.g:295:5: num
        	    {
        	        this->followPush(FOLLOW_num_in_rvalue567);
        	        num10=num();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulervalueEx;
        	        }


        	        {

        	                    each_line["rval"] = (this->get_strstream()->toStringTT(num10.start, num10.stop))
        	            ;
        	                            each_line["rval_type"] = "number";
        	                   
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulervalueEx; /* Prevent compiler warnings */
    rulervalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return rval;
}
/* $ANTLR end rvalue */

/**
 * $ANTLR start local_variable
 * OptFileGrammar.g:306:1: local_variable : Identifier ;
 */
OptFileGrammarParser::local_variable_return
OptFileGrammarParser::local_variable()
{
    OptFileGrammarParser::local_variable_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:307:3: ( Identifier )
        // OptFileGrammar.g:308:3: Identifier
        {
             this->matchToken(Identifier, &FOLLOW_Identifier_in_local_variable590);
            if  (this->hasException())
            {
                goto rulelocal_variableEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelocal_variableEx; /* Prevent compiler warnings */
    rulelocal_variableEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end local_variable */

/**
 * $ANTLR start constant
 * OptFileGrammar.g:315:1: constant : 'const' ( WS )+ Identifier ;
 */
OptFileGrammarParser::constant_return
OptFileGrammarParser::constant()
{
    OptFileGrammarParser::constant_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:316:3: ( 'const' ( WS )+ Identifier )
        // OptFileGrammar.g:317:3: 'const' ( WS )+ Identifier
        {
             this->matchToken(18, &FOLLOW_18_in_constant608);
            if  (this->hasException())
            {
                goto ruleconstantEx;
            }


            // OptFileGrammar.g:317:11: ( WS )+
            {
                int cnt10=0;

                for (;;)
                {
                    int alt10=2;
            	switch ( this->LA(1) )
            	{
            	case WS:
            		{
            			alt10=1;
            		}
            	    break;

            	}

            	switch (alt10)
            	{
            	    case 1:
            	        // OptFileGrammar.g:317:11: WS
            	        {
            	             this->matchToken(WS, &FOLLOW_WS_in_constant610);
            	            if  (this->hasException())
            	            {
            	                goto ruleconstantEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt10 >= 1 )
            		{
            		    goto loop10;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OptFileGrammarParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconstantEx;
            	}
            	cnt10++;
                }
                loop10: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(Identifier, &FOLLOW_Identifier_in_constant613);
            if  (this->hasException())
            {
                goto ruleconstantEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end constant */

/**
 * $ANTLR start member_variable
 * OptFileGrammar.g:330:1: member_variable : Identifier ( '.' vector )* '.' Identifier ;
 */
OptFileGrammarParser::member_variable_return
OptFileGrammarParser::member_variable()
{
    OptFileGrammarParser::member_variable_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:331:3: ( Identifier ( '.' vector )* '.' Identifier )
        // OptFileGrammar.g:332:3: Identifier ( '.' vector )* '.' Identifier
        {
             this->matchToken(Identifier, &FOLLOW_Identifier_in_member_variable631);
            if  (this->hasException())
            {
                goto rulemember_variableEx;
            }


            // OptFileGrammar.g:332:14: ( '.' vector )*

            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case 9:
                	{
                		switch ( this->LA(2) )
                		{
                		case Identifier:
                			{
                				switch ( this->LA(3) )
                				{
                				case 13:
                					{
                						alt11=1;
                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // OptFileGrammar.g:332:15: '.' vector
            	    {
            	         this->matchToken(9, &FOLLOW_9_in_member_variable634);
            	        if  (this->hasException())
            	        {
            	            goto rulemember_variableEx;
            	        }


            	        this->followPush(FOLLOW_vector_in_member_variable636);
            	        vector();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemember_variableEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


             this->matchToken(9, &FOLLOW_9_in_member_variable640);
            if  (this->hasException())
            {
                goto rulemember_variableEx;
            }


             this->matchToken(Identifier, &FOLLOW_Identifier_in_member_variable642);
            if  (this->hasException())
            {
                goto rulemember_variableEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemember_variableEx; /* Prevent compiler warnings */
    rulemember_variableEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end member_variable */

/**
 * $ANTLR start atomExp
 * OptFileGrammar.g:335:1: atomExp : ( num | member_variable | local_variable ) ( WS )* ( '+' | '-' ) ( WS )* ( num | member_variable | local_variable ) ;
 */
OptFileGrammarParser::atomExp_return
OptFileGrammarParser::atomExp()
{
    OptFileGrammarParser::atomExp_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:336:3: ( ( num | member_variable | local_variable ) ( WS )* ( '+' | '-' ) ( WS )* ( num | member_variable | local_variable ) )
        // OptFileGrammar.g:337:3: ( num | member_variable | local_variable ) ( WS )* ( '+' | '-' ) ( WS )* ( num | member_variable | local_variable )
        {
            // OptFileGrammar.g:337:3: ( num | member_variable | local_variable )
            {
                int alt12=3;
                switch ( this->LA(1) )
                {
                case Number:
                	{
                		alt12=1;
                	}
                    break;
                case Identifier:
                	{
                		switch ( this->LA(2) )
                		{
                		case 9:
                			{
                				alt12=2;
                			}
                		    break;
                		case WS:
                		case 7:
                		case 8:
                			{
                				alt12=3;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 12 );
                		    ex->set_state( 2 );


                		    goto ruleatomExpEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 12 );
                    ex->set_state( 0 );


                    goto ruleatomExpEx;

                }

                switch (alt12)
                {
            	case 1:
            	    // OptFileGrammar.g:337:4: num
            	    {
            	        this->followPush(FOLLOW_num_in_atomExp658);
            	        num();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OptFileGrammar.g:337:10: member_variable
            	    {
            	        this->followPush(FOLLOW_member_variable_in_atomExp662);
            	        member_variable();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;
            	case 3:
            	    // OptFileGrammar.g:337:28: local_variable
            	    {
            	        this->followPush(FOLLOW_local_variable_in_atomExp666);
            	        local_variable();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;

                }
            }

            // OptFileGrammar.g:338:3: ( WS )*

            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // OptFileGrammar.g:338:3: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_atomExp671);
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


            if ( ((this->LA(1) >= 7) && (this->LA(1) <= 8)) )
            {
                this->consume();
                this->set_perror_recovery(false);
            }
            else
            {
                new ANTLR_Exception< OptFileGrammarParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleatomExpEx;
            }


            // OptFileGrammar.g:341:5: ( WS )*

            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case WS:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // OptFileGrammar.g:341:5: WS
            	    {
            	         this->matchToken(WS, &FOLLOW_WS_in_atomExp693);
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            // OptFileGrammar.g:342:3: ( num | member_variable | local_variable )
            {
                int alt15=3;
                switch ( this->LA(1) )
                {
                case Number:
                	{
                		alt15=1;
                	}
                    break;
                case Identifier:
                	{
                		switch ( this->LA(2) )
                		{
                		case 9:
                			{
                				alt15=2;
                			}
                		    break;
                		case EOF:
                		case WS:
                		case 10:
                			{
                				alt15=3;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 15 );
                		    ex->set_state( 2 );


                		    goto ruleatomExpEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< OptFileGrammarParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 15 );
                    ex->set_state( 0 );


                    goto ruleatomExpEx;

                }

                switch (alt15)
                {
            	case 1:
            	    // OptFileGrammar.g:342:4: num
            	    {
            	        this->followPush(FOLLOW_num_in_atomExp699);
            	        num();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OptFileGrammar.g:342:10: member_variable
            	    {
            	        this->followPush(FOLLOW_member_variable_in_atomExp703);
            	        member_variable();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;
            	case 3:
            	    // OptFileGrammar.g:342:28: local_variable
            	    {
            	        this->followPush(FOLLOW_local_variable_in_atomExp707);
            	        local_variable();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleatomExpEx;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleatomExpEx; /* Prevent compiler warnings */
    ruleatomExpEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end atomExp */

/**
 * $ANTLR start set
 * OptFileGrammar.g:345:1: set : '[' ( Number ( WS )* )+ ']' ;
 */
OptFileGrammarParser::set_return
OptFileGrammarParser::set()
{
    OptFileGrammarParser::set_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:346:3: ( '[' ( Number ( WS )* )+ ']' )
        // OptFileGrammar.g:347:3: '[' ( Number ( WS )* )+ ']'
        {
             this->matchToken(13, &FOLLOW_13_in_set723);
            if  (this->hasException())
            {
                goto rulesetEx;
            }


            // OptFileGrammar.g:347:7: ( Number ( WS )* )+
            {
                int cnt17=0;

                for (;;)
                {
                    int alt17=2;
            	switch ( this->LA(1) )
            	{
            	case Number:
            		{
            			alt17=1;
            		}
            	    break;

            	}

            	switch (alt17)
            	{
            	    case 1:
            	        // OptFileGrammar.g:347:8: Number ( WS )*
            	        {
            	             this->matchToken(Number, &FOLLOW_Number_in_set726);
            	            if  (this->hasException())
            	            {
            	                goto rulesetEx;
            	            }


            	            // OptFileGrammar.g:347:15: ( WS )*

            	            for (;;)
            	            {
            	                int alt16=2;
            	                switch ( this->LA(1) )
            	                {
            	                case WS:
            	                	{
            	                		alt16=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt16)
            	                {
            	            	case 1:
            	            	    // OptFileGrammar.g:347:15: WS
            	            	    {
            	            	         this->matchToken(WS, &FOLLOW_WS_in_set728);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulesetEx;
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop16;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop16: ; /* Jump out to here if this rule does not match */


            	        }
            	        break;

            	    default:

            		if ( cnt17 >= 1 )
            		{
            		    goto loop17;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OptFileGrammarParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesetEx;
            	}
            	cnt17++;
                }
                loop17: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(17, &FOLLOW_17_in_set733);
            if  (this->hasException())
            {
                goto rulesetEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetEx; /* Prevent compiler warnings */
    rulesetEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end set */

/**
 * $ANTLR start range
 * OptFileGrammar.g:350:1: range : '[' Number ':' Number ':' Number ']' ;
 */
OptFileGrammarParser::range_return
OptFileGrammarParser::range()
{
    OptFileGrammarParser::range_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:351:3: ( '[' Number ':' Number ':' Number ']' )
        // OptFileGrammar.g:352:3: '[' Number ':' Number ':' Number ']'
        {
             this->matchToken(13, &FOLLOW_13_in_range748);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(Number, &FOLLOW_Number_in_range750);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(11, &FOLLOW_11_in_range752);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(Number, &FOLLOW_Number_in_range754);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(11, &FOLLOW_11_in_range756);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(Number, &FOLLOW_Number_in_range758);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


             this->matchToken(17, &FOLLOW_17_in_range760);
            if  (this->hasException())
            {
                goto rulerangeEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerangeEx; /* Prevent compiler warnings */
    rulerangeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end range */

/**
 * $ANTLR start vector
 * OptFileGrammar.g:355:1: vector : Identifier '[' Number ']' ;
 */
void
OptFileGrammarParser::vector()
{
        OptFileGrammarParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // OptFileGrammar.g:356:3: ( Identifier '[' Number ']' )
        // OptFileGrammar.g:357:3: Identifier '[' Number ']'
        {
             this->matchToken(Identifier, &FOLLOW_Identifier_in_vector775);
            if  (this->hasException())
            {
                goto rulevectorEx;
            }


             this->matchToken(13, &FOLLOW_13_in_vector777);
            if  (this->hasException())
            {
                goto rulevectorEx;
            }


             this->matchToken(Number, &FOLLOW_Number_in_vector779);
            if  (this->hasException())
            {
                goto rulevectorEx;
            }


             this->matchToken(17, &FOLLOW_17_in_vector781);
            if  (this->hasException())
            {
                goto rulevectorEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorEx; /* Prevent compiler warnings */
    rulevectorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end vector */

/**
 * $ANTLR start str
 * OptFileGrammar.g:360:1: str : '\\'' (~ ( '\\r' | '\\n' | '\\'' ) )* '\\'' ;
 */
OptFileGrammarParser::str_return
OptFileGrammarParser::str()
{
    OptFileGrammarParser::str_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder();


 
    {
        // OptFileGrammar.g:361:3: ( '\\'' (~ ( '\\r' | '\\n' | '\\'' ) )* '\\'' )
        // OptFileGrammar.g:362:3: '\\'' (~ ( '\\r' | '\\n' | '\\'' ) )* '\\''
        {
             this->matchToken(14, &FOLLOW_14_in_str796);
            if  (this->hasException())
            {
                goto rulestrEx;
            }


            // OptFileGrammar.g:363:3: (~ ( '\\r' | '\\n' | '\\'' ) )*

            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case Identifier:
                case Number:
                case WS:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 17:
                case 18:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    // OptFileGrammar.g:
            	    {
            	        if ( ((this->LA(1) >= Identifier) && (this->LA(1) <= 13)) || ((this->LA(1) >= 17) && (this->LA(1) <= 18)) )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< OptFileGrammarParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto rulestrEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


             this->matchToken(14, &FOLLOW_14_in_str833);
            if  (this->hasException())
            {
                goto rulestrEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestrEx; /* Prevent compiler warnings */
    rulestrEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end str */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */



/* End of code
 * =============================================================================
 */
